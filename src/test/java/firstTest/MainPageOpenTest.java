package firstTest;


import com.sun.org.glassfish.gmbal.Description;
import firstTest.model.Comment;
import firstTest.model.User;
import org.junit.Test;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.remote.RemoteWebDriver;

import java.io.IOException;
import java.io.InputStream;
import java.util.Properties;
import java.util.Set;
import java.util.logging.Logger;

import static java.lang.Thread.sleep;
import static org.openqa.selenium.By.*;

/**
 * This is the first test for QA2
 */
public class MainPageOpenTest {

    Properties prop = new Properties();
    InputStream input = null;

    //Please, set browser name and path to driver in ../resources/test.properties file!
    WebDriver driver = initializeDriver();

    Logger log = Logger.getLogger(MainPageOpenTest.class.getName());

    @Test
    @Description("Check elements on main page")
    public void javaGuruMainPageTest() throws InterruptedException {
        goToMainPage();

        checkTitle("JavaGuru - Software Development Courses");

        //Let's imagine, that main page is separated vertically by three columns
        checkColumns();

        //Check if logo image is present in the left upper corner
        checkLogoImg();

        checkFirstColumn();

        checkSecondColumn();

        checkThirdColumn();

        closeAllTabs();
    }

    @Test
    @Description("Check if registration is successful with only mandatory fields")
    public void javaGuruRegistrationWithMandatoryFieldsTest() throws InterruptedException {
        Comment comment = new Comment("Software developer", "Somebody", "Some comment");
        User user = new User("Name", "Surname", "12345678", "email@email.com", comment);

        goToMainPage();

        goToRegistrationPage();
        log.info("QA registration page opened!");

        fillCredentialsWithValidationCheck(user);

        //QA1 or QA2 course
        chooseCourse("QA2");

        hasComputer(true);

        submit(); //submit registration form with all fields

        //check if registration was completed successfully
        isRegistrationSuccessful();

        closeAllTabs();
    }

    @Test
    @Description("Check if registration is successful with all fields")
    public void javaGuruRegistrationWithAllFieldsTest() throws InterruptedException {
        Comment comment = new Comment("Software developer", "Somebody", "Some comment");
        User user = new User("Name", "Surname", "12345678", "email@email.com", comment);

        goToMainPage();

        goToRegistrationPage();
        log.info("QA registration page opened!");

        //Check if all required fields have required class
        checkMandatoryField("entry_1000000"); //name
        checkMandatoryField("entry_1000001"); //surname
        checkMandatoryField("entry_1000002"); //mobile
        checkMandatoryField("entry_1000003"); //email
        checkMandatoryField("group_738971122_1"); //course level
        checkMandatoryField("group_1887084786_1"); //is notebook present
        log.info("Required fields checked for mandatory.");

        //Ohh... Let's try to submit form skipping each required field
        fillCredentialsWithValidationCheck(user);

        //QA1 or QA2 course
        chooseCourse("QA2");
        submit(); //submit form without notebook status

        //Only notebook status validation message should appear
        fieldValidationMessageAbsent("Name", "1953673096_errorMessage");
        fieldValidationMessageAbsent("Surname", "1580983201_errorMessage");
        fieldValidationMessageAbsent("Mobile", "351984802_errorMessage");
        fieldValidationMessageAbsent("Email", "1839517565_errorMessage");
        fieldValidationMessageAbsentRadio("Course radio", 0);
        fieldValidationMessagePresentRadio("Notebook radio", 1);

        hasComputer(true);
        log.info("All field validation messages checked.");

        fillComments(user.getComment());

        fillDiscount("12345");

        submit(); //submit registration form with all fields

        //check if registration was completed successfully
        isRegistrationSuccessful();

        closeAllTabs();
    }

    private void checkFirstColumn() {
        log.info("Starting check of first column...");

        //Let's imagine, that first column is separated by blocks horizontally and check if these blocks are present
        if (driver.findElements(cssSelector("div[class='scedule space']")).size() < 5)
            log.info("Not all blocks with class schedule space are present!");

        //Checking if all items of menu of JavaGuru courses are present
        if (driver.findElements(className(("aboutJava"))).size() < 6)
            log.info("Not all course menu items are present!");

        //Check if registration buttons are present
        if (driver.findElements(className(("regJava"))).size() < 4)
            log.info("Not all registration buttons are present!");

        //Check if prices are present
        if (driver.findElements(className(("price"))).size() < 1)
            log.info("Prices are not present!!");

        //Check if prices are correct
        if (!"Java 1: 250 €\nJava 2: 300 €\nJava 3: 350 €\nQA: 250 €".equals(driver.findElement(By.className("priceTxt")).getText()))
            log.info("Check if prices are correct!");

        //Check if contact information is valid
        checkContacts();

        //Check facebook plugin present
        if (driver.findElements(cssSelector("div[class='fb-page fb_iframe_widget']")).size() < 1)
            log.warning("Facebook channel doesn't exist!");
        log.info("Check of first column finished!");
    }

    private void checkThirdColumn() {
        log.info("Starting check of third column...");

        //Check if languages' icons are present
        checkLanguageBar();

        //Check if there are schedules for courses available
        if (driver.findElements(className(("scedule"))).size() < 9)
            log.warning("Not all schedules present!");

        //Check if schedules have from 9 to 12 lessons
        driver.findElements(xpath("//div[@class='scedule']")).forEach(this::checkScTxt);
        log.info("Third column checked!");
    }

    private void checkScTxt(WebElement we) {
        int lessonsSize = we.findElements(xpath(".//div[@class='scTxt']")).size();

        //Let's suppose, that there are from 9 to 12 lessons in each course
        if(lessonsSize > 12 || lessonsSize < 9)
            log.warning("Check lessons size in the calendar!");
    }

    private void checkLanguageBar() {
        if (driver.findElements(xpath(("//img[contains(@src,'img/lv.png')]"))).isEmpty())
            log.warning("LV language icon is absent!");

        if (driver.findElements(xpath(("//img[contains(@src,'img/ru.png')]"))).isEmpty())
            log.warning("RU language icon is absent!");
    }

    private void checkSecondColumn() {
        log.info("Starting check of second column...");

        //Check if there is promo in the top of middle column about courses starting soon
        if (driver.findElements(className(("mainPromo"))).size() < 1)
            log.warning("Main promo with coming soon courses doesn't exist!");

        //Check if main news and description blocks are present
        if (driver.findElements(className(("midContent"))).size() < 7)
            log.warning("Check second column's blocks of main content! They are too few!");
        log.info("Second column checked!");
    }

    private void checkContacts() {
        if (driver.findElements(className(("phone"))).size() < 1)
            log.warning("Contact phone doesn't exist!");

        if (!driver.findElement(className(("phone"))).getText().equals("(+371) 26120960"))
            log.warning("Contact phone is not correct!");

        if (driver.findElements(className(("mail"))).size() < 1)
            log.warning("Contact mail doesn't exist!");

        if (!driver.findElement(className(("mail"))).getText().equals("javagurulv@gmail.com"))
            log.warning("Contact mail is not correct!");

        if (driver.findElements(className(("skype"))).size() < 1)
            log.warning("Contact skype doesn't exist!");

        if (!driver.findElement(className(("skype"))).getText().equals("wrcstar"))
            log.warning("Contact skype is not correct!");
    }

    private void checkLogoImg() {
        if (driver.findElements(xpath(("//img[contains(@src,'img/logoJavaguru225.png')]"))).isEmpty())
            log.warning("Logo picture not present!");
        else log.info("Logo image is present!");
    }

    private void checkTitle(String title) {
        if (!title.equals(driver.getTitle())) log.warning("Page's title doesn't match!");
        else log.info("Page title is correct");
    }

    private void checkColumns() {
        if (driver.findElements(className("fCol")).isEmpty() ||
                driver.findElements(className("sCol")).isEmpty() ||
                driver.findElements(className("tCol")).isEmpty()) {
            log.warning("Check page's separation by columns!");
        } else log.info("Page is separated by columns successfully!");
    }

    private void submit() {
        driver.findElement(id("ss-submit")).click();
    }

    private void fillComments(Comment comment) {
        fillField("entry_1000004", comment.getProgrammingExperience());
        fillField("entry_1696450117", comment.getRecommendedBy());
        fillField("entry_1000006", comment.getAdditionalComment());
    }

    private void fillDiscount(String discount) {
        driver.findElement(id("entry_1091055623")).sendKeys(discount);
    }

    private void hasComputer(boolean hasCompuer) {
        if (hasCompuer) {
            driver.findElements(cssSelector(".ss-choice-label")).get(2).click();
        } else {
            driver.findElements(cssSelector(".ss-choice-label")).get(3).click();
        }
    }

    private void chooseCourse(String courseName) throws RuntimeException{
        switch (courseName) {
            case "QA1":
                driver.findElements(cssSelector(".ss-choice-label")).get(0).click();
                break;
            case "QA2":
                driver.findElements(cssSelector(".ss-choice-label")).get(1).click();
                break;
            default: throw new RuntimeException("Course doesn't exist!");
        }
    }

    private void fillCredentialsWithValidationCheck(User user) {
        log.info("No fields filled...");
        submit(); //Submitting empty form

        // One 'bug' found: by default cursor is placed on name field
        // and even if name field is empty, validation message doesn't appear
        fieldValidationMessagePresent("Name", "1953673096_errorMessage");
        fieldValidationMessagePresent("Surname", "1580983201_errorMessage");
        fieldValidationMessagePresent("Mobile", "351984802_errorMessage");
        fieldValidationMessagePresent("Email", "1839517565_errorMessage");
        fieldValidationMessagePresentRadio("Course radio", 0);
        fieldValidationMessagePresentRadio("Notebook radio", 1);

        // -----------------------------------------------------------------

        fillField("entry_1000000", user.getName());
        log.info("Name field filled...");
        submit();//Submitting form only with name

        //Validation message about name should be absent
        fieldValidationMessageAbsent("Name", "1953673096_errorMessage");

        //Another one bug: after filling name field, cursor is placed to surname
        //and even if we try to submit form without surname, validation message doesn't appear
        fieldValidationMessagePresent("Surname", "1580983201_errorMessage");
        fieldValidationMessagePresent("Mobile", "351984802_errorMessage");
        fieldValidationMessagePresent("Email", "1839517565_errorMessage");
        fieldValidationMessagePresentRadio("Course radio", 0);
        fieldValidationMessagePresentRadio("Notebook radio", 1);

        // -----------------------------------------------------------------

        fillField("entry_1000001", user.getSurname());
        log.info("Name and surname fields filled...");
        submit();//Submitting form with name and surname

        //Validation message about name and surname should be absent
        fieldValidationMessageAbsent("Name", "1953673096_errorMessage");
        fieldValidationMessageAbsent("Surname", "1580983201_errorMessage");

        //Another one bug: after filling name and surname fields, cursor is placed to mobile
        //and even if we try to submit form without mobile, validation message doesn't appear
        fieldValidationMessagePresent("Mobile", "351984802_errorMessage");
        fieldValidationMessagePresent("Email", "1839517565_errorMessage");
        fieldValidationMessagePresentRadio("Course radio", 0);
        fieldValidationMessagePresentRadio("Notebook radio", 1);

        // -----------------------------------------------------------------

        fillField("entry_1000002", user.getMobileNumber());
        log.info("Name, surname and mobile fields filled...");
        submit();//Submitting form with name, surname and mobile

        //Validation message about name, surname and mobile should be absent
        fieldValidationMessageAbsent("Name", "1953673096_errorMessage");
        fieldValidationMessageAbsent("Surname", "1580983201_errorMessage");
        fieldValidationMessageAbsent("Mobile", "351984802_errorMessage");

        //Another one bug: after filling name surname and mobile fields, cursor is placed to email
        //and even if we try to submit form without email, validation message doesn't appear
        fieldValidationMessagePresent("Email", "1839517565_errorMessage");
        fieldValidationMessagePresentRadio("Course radio", 0);
        fieldValidationMessagePresentRadio("Notebook radio", 1);

        // -----------------------------------------------------------------

        fillField("entry_1000003", user.getEmail());
        log.info("Name, surname mobile and email fields filled...");
        submit(); // Submit form with all credentials
        fieldValidationMessageAbsent("Name", "1953673096_errorMessage");
        fieldValidationMessageAbsent("Surname", "1580983201_errorMessage");
        fieldValidationMessageAbsent("Mobile", "351984802_errorMessage");
        fieldValidationMessageAbsent("Email", "1839517565_errorMessage");
        fieldValidationMessagePresentRadio("Course radio", 0);
        fieldValidationMessagePresentRadio("Notebook radio", 1);
    }

    private void fillField(String fieldName, String fieldValue) {
        driver.findElement(id(fieldName)).clear();
        driver.findElement(id(fieldName)).sendKeys(fieldValue);
    }

    private void fieldValidationMessagePresent(String fieldName, String fieldId) {
        if (driver.findElement(id(fieldId)).findElements(xpath("..//input[contains(@class, 'ss-q-short required')]")).size() == 0)
            log.warning("Validation message should be present for " + fieldName);
    }

    private void fieldValidationMessagePresentRadio(String fieldName, int idx) {
        if (driver.findElements(xpath(".//div[contains(@class, 'ss-item ss-item-required ss-radio')]")).get(idx).findElements(xpath(".//ul[contains(@class, 'ss-choices required')]")).size() == 0)
            log.warning("Validation message should be present for " + fieldName);
    }

    private void fieldValidationMessageAbsentRadio(String fieldName, int idx) {
        if (driver.findElements(xpath(".//div[contains(@class, 'ss-item ss-item-required ss-radio')]")).get(idx).findElements(xpath(".//ul[contains(@class, 'ss-choices required')]")).size() > 0)
            log.warning("Validation message should be present for " + fieldName);
    }

    private void fieldValidationMessageAbsent(String fieldName, String fieldId) {
        if (driver.findElement(id(fieldId)).findElements(xpath("..//input[contains(@class, 'ss-q-short required')]")).size() > 0)
            log.warning("Validation message should be absent for " + fieldName);
    }

    private void goToMainPage() {
        driver.get("http://javaguru.lv");
        driver.manage().window().maximize();
    }

    private void goToRegistrationPage() throws InterruptedException {
        driver.findElements(className("course")).get(3).click();
        sleep(2000);
        driver.findElement(className("regCourseA")).click();
        sleep(2000);
        switchToTabByIdx(1);
    }

    private void checkMandatoryField(String fieldId) {
        if (!driver.findElement(id(fieldId)).getAttribute("aria-required").equals("true")) {
            log.warning("Field with id='" + fieldId + "' has to be mandatory!");
        }
    }

    private RemoteWebDriver initializeDriver() {
        String browser = getBrowser();

        switch (browser) {
            case "firefox":
                System.setProperty("webdriver.gecko.driver", prop.getProperty("path.to.driver"));
                return new FirefoxDriver();
            case "chrome":
                System.setProperty("webdriver.chrome.driver", prop.getProperty("path.to.driver"));
                return new ChromeDriver();
            default:
                throw new RuntimeException("Invalid browser name");
        }
    }

    private String getBrowser() {
        String browser = "";
        try {
            InputStream input = getClass().getResourceAsStream("../test.properties");
            prop.load(input);
            browser = prop.getProperty("browser.name");
        } catch (IOException ex) {
            ex.printStackTrace();
        } finally {
            if (input != null) {
                try {
                    input.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
        return browser;
    }

    private void closeAllTabs() {
        Set<String> tabs = driver.getWindowHandles();
        for (int idx = tabs.toArray().length - 1; idx >= 0; idx--) {
            switchToTabByIdx(idx);
            driver.close();
        }
        log.info("Tabs closed!");
    }

    private void switchToTabByIdx(int idx) {
        Set<String> tabs = driver.getWindowHandles();
        driver.switchTo().window((String) tabs.toArray()[idx]);
    }

    private void isRegistrationSuccessful() {
        if (!driver.findElement(className("ss-resp-message")).getText().equals("Your response has been recorded.")) {
            log.warning("Registration was not successful!");
        } else {
            log.info("Registration completed successfully!");
        }
    }
}
